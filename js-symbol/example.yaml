 
 -
    content: |
      Что выведет этот код?

      ```js
      let obj = {
       "0": 1,
       0: 2
      };

      alert( obj["0"] + obj[0] );
      ```
    type: single
    answers:
      - '`2`'
      - '`3`'
      - '`4`'
      - '`12`'
      - В коде ошибка
    correctAnswer: 2
    correctAnswerComment: |
      Дело в том, что у объектов в JavaScript ключи всегда строковые. Если в качестве ключа передано что-то ещё, то оно приводится к строке. Значения обрабатываются в порядке поступления, поэтому `0: 2` перекроет `"0": 1`.

      В итоге получится объект с единственным ключом: `{"0" : 2}`.

      При доступе к ключу -- `obj["0"]` и `obj[0]` эквивалентны, опять же, поскольку ключ приводится к строке.
 -
    content: |
      Есть ли разница между вызовами `i++` и `++i`?
    type: single
    answers:
      - Разница в значении, которое возвращает такой вызов
      - "Разница в значении `i` после вызова"
      - Нет никакой разницы
    correctAnswer: 0


  -
    content: |
      Какие вызовы `parseInt` возвратят число?
    type: multi
    answers:
      - '`parseInt("1px")`'
      - '`parseInt("-1.2")`'
      - '`parseInt("0 минут")`'
      - '`parseInt("$1.2")`'
    correctAnswer:
      - 0
      - 1
      - 2

  -
    content: |
      Какой код корректно найдёт максимальное значение в непустом массиве `arr`?
    type: multi
    answers:
      - "`arr.reduce(function(prev, item) { return Math.max(prev, item) })`"
      - "`Math.max.apply(null, arr)`"
      - "`Math.max(arr)`"
      - '`arr.findMax()`'
    correctAnswer:
      - 0
      - 1